# build and push a docker image from the latest push to "develop" branch
on:
  push:
    branches:
      - main
      - master
      - develop
    pull_request:
      - open
      - synchronized
jobs:
  whatisthecontext:
    runs-on: ubuntu-latest
    name: display the current build & deploy CI context and export useful values
    outputs:
      sha: ${{ steps.contextvals.outputs.sha }}
      built_at: ${{ steps.contextvals.outputs.built_at }} 
      is_github_release: ${{ steps.contextvals.outputs.is_release }}
      is_dev_deploy: ${{ github.ref == 'master' }}
    steps:
      - name: Export values
        id: contextvals
        run: |
          SHA=${{ github.sha }}
          BUILT_AT=$(date "+%Y-%m-%d %H:%M:%S%z")
          IS_GITHUB_RELEASE=${{ github.event == 'release' }}
          echo ::set-output name=sha::${SHA:0:8}
          echo ::set-output name=built_at::${BUILT_AT}
          echo ::set-output name=is_release::${IS_GITHUB_RELEASE}

  build:
    # we do not rebuild on a release to production rather we just publish the built image at the git SHA we are releaseing from
    if: ${{ github.event != 'release' }}
    needs: whatisthecontext
    runs-on: ubuntu-latest
    name: build & push image
    steps:

      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: build-and-push-image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ballotnav/ballotnav:${{ needs.whatisthecontext.outputs.sha }}

      - name: built image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  deploy_dev:   
    name: deploy to dev environment
    runs-on: ubuntu-latest
    needs: [whatisthecontext, build]
    if: ${{ needs.whatisthecontext.outputs.is_release == false && needs.whatisthecontext.outputs.is_dev_deploy }}
    steps:

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Pull down currently deployed task-definition
      run: |
        aws ecs describe-task-definition --task-definition ballotnav --query taskDefinition > task.json

    - name: Render task-definition template
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task.json
        container-name: ballotnav
        image: ballotnav/ballotnav:${{ needs.whatisthecontext.outputs.sha }}

    - name: Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ballotnav-dev
        cluster: bn-dev
        wait-for-service-stability: true
